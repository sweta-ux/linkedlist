

#include<stdio.h>
#include<stdlib.h>

struct node
{
	int info;
	struct node *link;
};

struct node *createList(struct node *start);
void displayList(struct node *start);
struct node *insertInBeginning(struct node *start,int data);
void insertAtEnd(struct node *start,int data);
struct node *deleteNode(struct node *start,int data);
struct node *reverseList(struct node *start);

main()
{
	struct node *start=NULL;	
	int choice,data,x,k;
	
	start = createList(start);

	while(1)
	{
		printf("\n");
		printf("1.Display list\n");
		printf("2.Delete a node\n");
		printf("3.Reverse the list\n");
		printf("4.Quit\n\n");
		
		printf("Enter your choice : ");
		scanf("%d",&choice);

		if(choice==4)
			break;

		switch(choice)
		{
		 case 1:
			displayList(start);
			break;
		 case 2:
			printf("Enter the element to be deleted : ");
			scanf("%d",&data);
			start=deleteNode(start, data);	
			break;
		 case 3:
			start=reverseList(start);
			break;
		 default:
			 printf("Wrong choice\n");
		}
	}
}/*End of main()*/


struct node *createList(struct node *start)
{
	int i,n,data;

	printf("Enter the number of nodes : ");
	scanf("%d",&n);
	
	if(n==0)
		return start;

	printf("Enter the first element to be inserted : ");
	scanf("%d",&data);
	start=insertInBeginning(start,data);

	for(i=2; i<=n; i++)
	{
		printf("Enter the next element to be inserted : ");
		scanf("%d",&data);
		insertAtEnd(start,data);	
	}
	return start;
}/*End of createList()*/

struct node *insertInBeginning(struct node *start,int data)
{
	struct node *temp;
	temp=(struct node *)malloc(sizeof(struct node));
	temp->info=data;

	temp->link=start;
	start=temp;
	
	return start;
}

void insertAtEnd(struct node *start,int data)
{
	struct node *p,*temp;
	temp=(struct node *)malloc(sizeof(struct node));
	temp->info=data;

	p=start;
	while(p->link!=NULL)
		p=p->link;
	
	p->link=temp;
	temp->link=NULL;
}

void displayList(struct node *start)
{
	struct node *p;
	if(start==NULL)
	{
		printf("List is empty\n");
		return;
	}
	printf("List is :   ");
	p=start;
	while(p!=NULL)
	{
		printf("%d  ",p->info);
		p=p->link;
	}
	printf("\n");
}/*End of displayList()*/


struct node *deleteNode(struct node *start,int x)
{
	struct node *temp,*p;
	if(start==NULL)
	{
		printf("List is empty\n");
		return start;
	}
	/*Deletion of first node*/
	if(start->info==x)
	{
		temp=start;
		start=start->link;  
		free(temp);
		return start;
	}
	/*Deletion in between or at the end*/
	p=start;
	while(p->link!=NULL)
	{
		if(p->link->info==x)   
			break;	
		p=p->link;
	}
	
	if(p->link==NULL)
		printf("Element %d not in list\n\n",x);
	else
	{
		temp=p->link;
		p->link=temp->link;
		free(temp);
	}
	return start;
}

struct node *reverseList(struct node *start)
{
	struct node *prev, *ptr, *next;
	prev=NULL;
   	ptr=start;
	while(ptr!=NULL)
	{
		next=ptr->link;
		ptr->link=prev;
		prev=ptr;
		ptr=next;
	}
	start=prev;
	return start;
}/*End of reverseList()*/
